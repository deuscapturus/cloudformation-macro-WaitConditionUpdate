{
    "accountId": "000000000000",
    "fragment": {
        "Description": "Deploy a container to ECS Fargate",
        "Parameters": {
            "ContainerImage": {
                "Type": "String",
                "Description": "The Container Image to Run"
            },
            "DesiredCount": {
                "Type": "Number",
                "Default": 1
            },
            "WaitConditionUpdateParameters": {
                "Type": "CommaDelimitedList"
            },
            "HealthCheckPath": {
                "Description": "Path to the http health check endpoint. Example '/health'",
                "Type": "String",
                "AllowedPattern": "^\\/\\S*|^$",
                "ConstraintDescription": "Must be no spaces starting with a forward slash.  Example: /health"
            }
        },
        "Resources": {
            "ServiceWaitHandle": {
                "Type": "AWS::CloudFormation::WaitConditionHandle"
            },
            "TaskService": {
                "Type": "AWS::ECS::Service",
                "Properties": {
                    "Cluster": "default",
                    "DesiredCount": {
                        "Ref": "DesiredCount"
                    },
                    "LaunchType": "FARGATE",
                    "TaskDefinition": {
                        "Ref": "TaskDefinition"
                    }
                }
            },
            "TaskDefinition": {
                "Type": "AWS::ECS::TaskDefinition",
                "Properties": {
                    "ContainerDefinitions": [
                        {
                            "HealthCheck": {
                                "Fn::If": [
                                    "HealthCheck",
                                    {
                                        "Command": [
                                            "CMD-SHELL",
                                            {
                                                "Fn::Sub": "curl -fsS http://localhost:80${HealthCheckPath} > /dev/null"
                                            }
                                        ]
                                    },
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            },
                            "Image": {
                                "Ref": "ContainerImage"
                            },
                            "LogConfiguration": {
                                "LogDriver": "awslogs",
                                "Options": {
                                    "awslogs-group": {
                                        "Ref": "TaskLogGroup"
                                    },
                                    "awslogs-region": {
                                        "Ref": "AWS::Region"
                                    },
                                    "awslogs-stream-prefix": {
                                        "Ref": "Environment"
                                    }
                                }
                            },
                            "Name": "TestTask",
                            "Environment": [
                                {
                                    "Name": "FAIL",
                                    "Value": false
                                }
                            ]
                        },
                        {
                            "Name": "CloudFormationAwaitReply",
                            "Image": "curlimages/curl:7.67.0",
                            "Command": [
                                "curl",
                                "-XPUT",
                                "-H",
                                "Content-Type:",
                                "--data-binary",
                                "{\"Status\" : \"SUCCESS\",\"Reason\" : \"Configuration Complete\",\"UniqueId\" : \"ID1234\",\"Data\" : \"Application has completed configuration.\"}",
                                {
                                    "Ref": "ServiceWaitHandle"
                                }
                            ],
                            "DependsOn": [
                                {
                                    "Condition": {
                                        "Fn::If": [
                                            "HealthCheck",
                                            "HEALTHY",
                                            "START"
                                        ]
                                    },
                                    "ContainerName": "TestTask"
                                }
                            ],
                            "Essential": false
                        }
                    ],
                    "RequiresCompatibilities": [
                        "FARGATE"
                    ]
                }
            },
            "ServiceWaitCondition": {
                "Type": "AWS::CloudFormation::WaitCondition",
                "Properties": {
                    "Handle": {
                        "Ref": "ServiceWaitHandle"
                    },
                    "Timeout": "300",
                    "Count": {
                        "Ref": "DesiredCount"
                    }
                }
            }
        }
    },
    "transformId": "000000000000::WaitConditionUpdate",
    "requestId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
    "region": "us-west-2",
    "params": {},
    "templateParameterValues": {
        "WaitConditionUpdateParameters": [
            "DesiredCount",
            "ContainerImage"
        ],
        "HealthCheckPath": "",
        "DesiredCount": "1",
        "ContainerImage": "registry.hub.docker.com/deuscapturus/helloworld-http-envs:2"
    }
}
